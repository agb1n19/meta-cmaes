#! /usr/bin/env python
import sys
sys.path.insert(0, sys.path[0]+'/waf_tools')

import os
import sferes
import rhex_dart



def options(opt):
    opt.load('rhex_dart')

def configure(conf):
    #conf.get_env()['BUILD_GRAPHIC'] = False

    conf.load('rhex_dart')
    conf.check_rhex_dart()
  


			# sferes.create_variants(bld,
		    #     source = 'rhex_metaCMAES.cpp',
		    #     use = 'sferes2',
		    #     uselib = 'DART_GRAPHIC ' + libs,
		    #     target = 'rhex_metaCMAES_graphic_envir_'+c,
		    #     cxxflags = cxxflags + ['-g', '-march=native',"-DGRAPHIC","-DEVAL_ENVIR","-DEXPERIMENT_TYPE="+str(i)],   # -march=native
		    #             variants = ['BINARY'])
			# sferes.create_variants(bld,
		    #                source = 'rhex_metaCMAES.cpp',
		    #                use = 'sferes2',
		    #                uselib = 'DART_GRAPHIC ' + libs,
		    #                target = 'rhex_metaCMAES_graphic_damage_'+c,
		    #                cxxflags = cxxflags + ['-g', '-march=native',"-DGRAPHIC","-DEXPERIMENT_TYPE="+str(i)],   # -march=native
		    #                variants = ['BINARY'])

def build(bld):
    libs = 'RHEX_DART RHEX_CONTROLLER DART EIGEN BOOST_DART BOOST TBB '

    cxxflags = bld.get_env()['CXXFLAGS']
    tag=""
    num_cores = os.environ.get('NUM_CORES',1)
    if os.environ.get('BUILD_META',False) == "True":
		sferes.create_variants(bld,
		                   source = 'rhex_metaCMAES.cpp',
		                   use = 'sferes2',
		                   uselib = libs,
		                   target = 'rhex_metaCMAES_envir_meta',
		                   cxxflags = cxxflags + ['-march=native',"-DEVAL_ENVIR","-DEXPERIMENT_TYPE=0","-DNUM_CORES="+str(num_cores)],   # -march=native
		                   variants = ['BINARY'])
		sferes.create_variants(bld,
		                   source = 'rhex_metaCMAES.cpp',
		                   use = 'sferes2',
		                   uselib = libs,
		                   target = 'rhex_metaCMAES_damage_meta',
		                   cxxflags = cxxflags + ['-march=native',"-DEXPERIMENT_TYPE=0","-DNUM_CORES="+str(num_cores)],   # -march=native
		                   variants = ['BINARY'])
    else:  # build control conditions
        control_conditions=["random","duty","bo","lv"]
        for i,c in enumerate(control_conditions):
			sferes.create_variants(bld,
							source = 'rhex_metaCMAES.cpp',
							use = 'sferes2',
							uselib = libs,
							target = 'rhex_metaCMAES_'+c,
							cxxflags = cxxflags + ['-march=native',"-DEXPERIMENT_TYPE="+str(1+i),"-DNUM_CORES="+str(num_cores)],   # -march=native
							variants = ['BINARY'])

    # if bld.get_env()['BUILD_GRAPHIC'] == True:
    #   sferes.create_variants(bld,
    #                          source = 'hexa_duty.cpp',
    #                          use = 'sferes2',
    #                          uselib = graphic_libs,
    #                          cxxflags = cxxflags + ['-march=native'],
    #                          target = 'hexa_duty',
    #                          variants = ['GRAPHIC'])
